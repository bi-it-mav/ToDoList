@inject IDbContextFactory<AppDbContext> AppDbContextFactory

<EditForm Model="ToDo" OnSubmit="HandleSubmit">
	<div>
		<label>
			Is done
		</label>
		<InputCheckbox @bind-Value="ToDo.IsDone" disabled="@isBusy" />
	</div>
	<div>
		<label>
			Description
		</label>
		<InputTextArea @bind-Value="ToDo.Description" disabled="@isBusy" class="form-control" />
	</div>
	<div>
		<label>
			Due at
		</label>
		<InputDate @bind-Value="ToDo.DueAt" disabled="@isBusy" class="form-control" />
	</div>
	<button type="submit" disabled="@isBusy" class="btn btn-primary">Save</button>
	@if (exception is not null)
	{
		<div class="text-danger">@exception.Message</div>
	}
</EditForm>

@code {
	[Parameter]
	public required ToDo ToDo { get; set; }

	[Parameter]
	public required EventCallback<Modify> OnSubmitSuccess { get; set; }

	private bool isBusy = false;
	private Exception? exception;

	private async Task HandleSubmit()
	{
		try
		{
			isBusy = true;
			exception = null;
			ToDo.LastModifiedAt = DateTime.Now;
			using var appDbContext = await AppDbContextFactory.CreateDbContextAsync();
			// ToDo.Id == 0;

			if (ToDo.Id == 0)
			{
				await appDbContext.ToDos.AddAsync(ToDo);
			}
			else
			{
				appDbContext.Entry(ToDo).State = EntityState.Modified;
			}

			await appDbContext.SaveChangesAsync();
			await OnSubmitSuccess.InvokeAsync(this);
		}
		catch (Exception exception)
		{
			this.exception = exception;
		}
		finally
		{
			isBusy = false;
		}
	}
}
